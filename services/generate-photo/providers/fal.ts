import { fal } from '@fal-ai/client'

import { FalGenerateParams, FalGenerateResult } from '../types'
import { FalRawResponse } from '@/types'

/**
 * FAL AI Provider
 *
 * Handles communication with FAL AI image generation service.
 * Abstracts FAL-specific API details from the main service.
 */

/**
 * Configure FAL client with API key
 */
export function configureFalClient() {
  const apiKey = process.env.FAL_KEY

  if (!apiKey) {
    throw new Error('FAL API key not configured')
  }

  fal.config({
    credentials: apiKey,
  })
}

/**
 * Generate image using FAL AI
 *
 * @param params - Generation parameters (image, prompt, abort signal)
 * @returns Generated image URL and metadata
 * @throws Error if generation fails or is cancelled
 */
export async function generate(params: FalGenerateParams): Promise<FalGenerateResult> {
  const { imageData, prompt, abortSignal } = params

  // Ensure FAL client is configured
  configureFalClient()

  // Call FAL AI nano-banana/edit model with AbortSignal support
  const result = (await fal.subscribe('fal-ai/nano-banana/edit', {
    input: {
      prompt: prompt,
      image_urls: [imageData], // FAL expects array of image URLs | base64 data URIs
      num_images: 1,
      output_format: 'jpeg',
    },
    logs: true,
    abortSignal: abortSignal,
    onQueueUpdate: (update: any) => {
      if (update.status === 'IN_PROGRESS') {
        console.log('FAL AI processing:', update.logs?.map((log: any) => log.message))
      }
    },
  })) as FalRawResponse

  // Extract the response data
  const { images, description } = result.data

  if (!images || images.length === 0) {
    throw new Error('No images generated by FAL AI')
  }

  return {
    imageUrl: images[0].url,
    description: description || 'Image generated successfully',
    requestId: result.requestId,
  }
}
