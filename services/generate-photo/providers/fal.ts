import { fal } from '@fal-ai/client'

import { FalGenerateParams, FalGenerateResult } from '../types'
import { FalRawResponse } from '@/types'

/**
 * FAL AI Provider
 *
 * Handles communication with FAL AI image generation service.
 * Abstracts FAL-specific API details from the main service.
 */

/**
 * Configure FAL client with API key
 */
export function configureFalClient() {
  const apiKey = process.env.FAL_KEY

  if (!apiKey) {
    throw new Error('FAL API key not configured')
  }

  fal.config({
    credentials: apiKey,
  })
}

/**
 * Generate image using FAL AI
 *
 * @param params - Generation parameters (image, prompt, abort signal)
 * @returns Generated image URL and metadata
 * @throws Error if generation fails or is cancelled
 */
export async function generate(params: FalGenerateParams): Promise<FalGenerateResult> {
  const { imageData, prompt, abortSignal } = params

  // Ensure FAL client is configured
  configureFalClient()

  try {
    // Call FAL AI nano-banana/edit model with AbortSignal support
    const result = (await fal.subscribe('fal-ai/nano-banana/edit', {
      input: {
        prompt: prompt,
        image_urls: [imageData], // FAL expects array of image URLs | base64 data URIs
        num_images: 1,
        output_format: 'jpeg',
      },
      logs: true,
      abortSignal: abortSignal,
      onQueueUpdate: (update: any) => {
        if (update.status === 'IN_PROGRESS') {
          console.log('FAL AI processing:', update.logs?.map((log: any) => log.message))
        }
      },
    })) as FalRawResponse

    // Extract the response data
    const { images, description } = result.data

    if (!images || images.length === 0) {
      throw new Error('No images generated by FAL AI')
    }

    return {
      imageUrl: images[0].url,
      description: description || 'Image generated successfully',
      requestId: result.requestId,
    }
  } catch (error: any) {
    // Enhanced error logging to inspect the full error structure
    console.error('❌ FAL AI Generation Error:')
    console.error('Error name:', error?.name)
    console.error('Error message:', error?.message)
    console.error('Status code:', error?.status)

    // Deep inspect the body.detail array if it exists
    if (error?.body?.detail) {
      console.error('Validation errors (detail):')
      if (Array.isArray(error.body.detail)) {
        error.body.detail.forEach((detail: any, index: number) => {
          console.error(`  [${index}]:`, JSON.stringify(detail, null, 2))
        })
      } else {
        console.error('  Detail object:', JSON.stringify(error.body.detail, null, 2))
      }
    }

    // Log the full error body for complete inspection
    if (error?.body) {
      console.error('Full error body:', JSON.stringify(error.body, null, 2))
    }

    // Re-throw with enhanced message
    throw error
  }
}
